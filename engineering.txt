02/23/25

Due to some unfortunate illnesses on our end, we were delayed in our starting of this project. However, after reading through the gRPC
python tutotiral, we feel pretty good since the proto file seems to take care of all the low-level stuff for us. In fact, most of our code will remain
the same for the client UI, it's just that our server and client will be on a bidirectional stream in communicating.

It might be better to have each action be its own function. First, let's set up a "test_server" and "test_client" to make sure everything
will work properly at scale.

Ok, was able to make it so the server can notify all connected clients. Now, to mimic our server use from before, we need to be able
to notify specific users...Working now! Had to use the "listen" function.

After some more research, it seems the best way to construct our reworked application is to use "enums" for actions then declaring the whole
service as a bidrectional rpc.

4:34pm: The proto file is now completely set up the way it was in comm_server and comm_client from before. The files have also been generated.

The next step should be to get a client running with a server.

02/24/25

Since we got the server running yesterday, getting the client running was pretty much the same thing. We simply port all the handle responses from the "respond"
method in comm_client to match grpc proto file.

The same goes for sending requests, just change all send requests to a queue.

Ran into a little issue as proto doesn't allow use of nested lists, had to add extra message class for chat messages. And a format-reformat method
to server and client to better accomodate this.

Ok, everything is working now!



QUESTIONS

Does the use of this tool make the application easier or more difficult?
- Definitely easier. No need to worry about saving selectors or sending bytes, everything is set up
for you via the generated python files.
- Bugs are also much easier to track down, since there is really only two main functions: handling requests and handling responses (all the protocol stuff is abstracted away!)

What does it do to the size of the data passed?
- The size of data is now fixed at 80 bytes
- It is nice now to have certainty in the size; however, a more low-level optimization can be more efficient on average

How does it change the structure of the client?
- The client still has the same "send request" functions, but now it is able to make use of a separate thread for listening for responses sent by the server
- Before, we had to keep the client ui along with the "Bolt" class that was used as data for selectors, but now everything can be done in one file within the UI
- No need for comm_client that we had before for constructing data types; all is generated for us

The server?
- The server has a similar structure with a loop over requests and a dictionary to store connected clients
- For the most part, responses to requests are the same except for the protocol change
- However, now instead of dealing with multiple selectors, everything is multi-threaded and handled by the stub

How does this change the testing of the application?
- Testing now no longer requires testing encoding and decoding of protocols, since that is all done for us
- Most of testing (aside from database tests, which remain the same) involve making sure that the correct chat_pb2 requests and responses are expected
for the same operations
- In addition, functions are called automatically in a thread by the service object, so there is no manual calling
- Thus, testing must be done on a case-by-case basis via a "test_server" file
- This is all done in the test suite