02/23/25

Due to some unfortunate illnesses on our end, we were delayed in our starting of this project. However, after reading through the gRPC
python tutotiral, we feel pretty good since the proto file seems to take care of all the low-level stuff for us. In fact, most of our code will remain
the same for the client UI, it's just that our server and client will be on a bidirectional stream in communicating.

It might be better to have each action be its own function. First, let's set up a "test_server" and "test_client" to make sure everything
will work properly at scale.

Ok, was able to make it so the server can notify all connected clients. Now, to mimic our server use from before, we need to be able
to notify specific users...Working now! Had to use the "listen" function.

After some more research, it seems the best way to construct our reworked application is to use "enums" for actions then declaring the whole
service as a bidrectional rpc.

4:34pm: The proto file is now completely set up the way it was in comm_server and comm_client from before. The files have also been generated.

The next step should be to get a client running with a server.

02/24/25

Since we got the server running yesterday, getting the client running was pretty much the same thing. We simply port all the handle responses from the "respond"
method in comm_client to match grpc proto file.

The same goes for sending requests, just change all send requests to a queue.

Ran into a little issue as proto doesn't allow use of nested lists, had to add extra message class for chat messages. And a format-reformat method
to server and client to better accomodate this.